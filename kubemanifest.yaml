apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yaml
        kompose.version: 1.26.1 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: adminer
      name: adminer
    spec:
      ports:
        - name: "8000"
          port: 8000
          targetPort: 8080
      selector:
        io.kompose.service: adminer
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yaml
        kompose.version: 1.26.1 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: mysql-db
      name: mysql_db
    spec:
      ports:
        - name: "9906"
          port: 9906
          targetPort: 3306
      selector:
        io.kompose.service: mysql-db
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yaml
        kompose.version: 1.26.1 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: adminer
      name: adminer
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: adminer
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yaml
            kompose.version: 1.26.1 (HEAD)
          creationTimestamp: null
          labels:
            io.kompose.service: adminer
        spec:
          containers:
            - env:
                - name: ADMINER_DEFAULT_SERVER
                  value: mysql_db
              image: adminer:latest
              name: adminer
              ports:
                - containerPort: 8080
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yaml
        kompose.version: 1.26.1 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: api
      name: api
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: api
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yaml
            kompose.version: 1.26.1 (HEAD)
          creationTimestamp: null
          labels:
            io.kompose.service: api
        spec:
          containers:
            - env:
                - name: MYSQL_DATABASE
                  value: books
                - name: MYSQL_HOST_IP
                  value: mysql_db
                - name: MYSQL_PASSWORD
                  value: MYSQL_PASSWORD
                - name: MYSQL_USER
                  value: MYSQL_USER
              image: api
              name: api
              resources: {}
              volumeMounts:
                - mountPath: /app/node_modules
                  name: api-claim0
                - mountPath: /app
                  name: api-claim1
          restartPolicy: Always
          volumes:
            - name: api-claim0
              persistentVolumeClaim:
                claimName: api-claim0
            - name: api-claim1
              persistentVolumeClaim:
                claimName: api-claim1
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: api-claim0
      name: api-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: api-claim1
      name: api-claim1
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yaml
        kompose.version: 1.26.1 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: client
      name: client
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: client
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yaml
            kompose.version: 1.26.1 (HEAD)
          creationTimestamp: null
          labels:
            io.kompose.service: client
        spec:
          containers:
            - env:
                - name: CHOKIDAR_USEPOLLING
                  value: "true"
              image: client
              name: client
              resources: {}
              stdin: true
              volumeMounts:
                - mountPath: /app/node_modules
                  name: client-claim0
                - mountPath: /app
                  name: client-claim1
          restartPolicy: Always
          volumes:
            - name: client-claim0
              persistentVolumeClaim:
                claimName: client-claim0
            - name: client-claim1
              persistentVolumeClaim:
                claimName: client-claim1
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: client-claim0
      name: client-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: client-claim1
      name: client-claim1
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yaml
        kompose.version: 1.26.1 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: mysql-db
      name: mysql-db
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: mysql-db
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yaml
            kompose.version: 1.26.1 (HEAD)
          creationTimestamp: null
          labels:
            io.kompose.service: mysql-db
        spec:
          containers:
            - env:
                - name: MYSQL_DATABASE
                  value: books
                - name: MYSQL_HOST
                  value: localhost
                - name: MYSQL_PASSWORD
                  value: MYSQL_PASSWORD
                - name: MYSQL_ROOT_PASSWORD
                  value: MYSQL_ROOT_PASSWORD
                - name: MYSQL_USER
                  value: MYSQL_USER
              image: mysql
              name: mysql_db
              ports:
                - containerPort: 3306
              resources: {}
              securityContext:
                capabilities:
                  add:
                    - SYS_NICE
              volumeMounts:
                - mountPath: /docker-entrypoint-initdb.d/setup.sql
                  name: mysql-db-claim0
          restartPolicy: Always
          volumes:
            - name: mysql-db-claim0
              persistentVolumeClaim:
                claimName: mysql-db-claim0
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: mysql-db-claim0
      name: mysql-db-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
kind: List
metadata: {}

